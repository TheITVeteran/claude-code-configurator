name: 'CACI Package Security Scan'

# This workflow runs comprehensive security scans on a schedule
# Daily security scanning is now handled by the main CI pipeline (ci.yml)
# This provides additional deep security analysis

on:
  schedule:
    # Run comprehensive security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      deep_scan:
        description: 'Run deep security scan'
        required: false
        default: 'true'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-review:
    name: CACI Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-ghsas: '' # No exceptions for GitHub Security Advisories
          deny-licenses: GPL-2.0, GPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0, AGPL-1.0, AGPL-3.0, EUPL-1.1
          comment-summary-in-pr: true

  npm-audit:
    name: CACI NPM Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Cache security scanning artifacts
        uses: actions/cache@v4
        id: cache-security
        with:
          path: |
            packages/caci/node_modules
            ~/.npm
            ~/.cache/npm
            ~/.cache/snyk
            ~/.trivy
            ~/.semgrep
          key: ${{ runner.os }}-security-${{ hashFiles('packages/caci/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-security-${{ hashFiles('packages/caci/package-lock.json') }}-
            ${{ runner.os }}-security-

      - name: Install dependencies
        if: steps.cache-security.outputs.cache-hit != 'true'
        working-directory: packages/caci
        run: npm install

      - name: Run npm audit
        working-directory: packages/caci
        run: |
          npm audit --audit-level=low --json > npm-audit-results.json || true

      - name: Parse npm audit results
        working-directory: packages/caci
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY

          # Check if vulnerabilities were found
          if [ -s npm-audit-results.json ]; then
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit-results.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit-results.json)
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            
            # Fail if critical or high vulnerabilities found
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ **Critical or High severity vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: packages/caci/npm-audit-results.json
          retention-days: 30

  snyk-security-scan:
    name: CACI Snyk Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm install

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --sarif-file-output=snyk.sarif --json-file-output=snyk-results.json
          command: test
          working-directory: packages/caci

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: packages/caci/snyk.sarif
        continue-on-error: true

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: packages/caci/snyk-results.json
          retention-days: 30

  codeql-analysis:
    name: CACI CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          source-root: packages/caci/src

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm install

      - name: Build project
        working-directory: packages/caci
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  semgrep-scan:
    name: CACI Semgrep Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/nodejs
            p/typescript
          scanDirPath: packages/caci/src
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  secret-scanning:
    name: CACI Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
        continue-on-error: true

  license-compliance:
    name: CACI License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm install

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        working-directory: packages/caci
        run: |
          # Check for problematic licenses
          license-checker --onlyAllow 'MIT;ISC;BSD-2-Clause;BSD-3-Clause;Apache-2.0;CC0-1.0;Unlicense;0BSD' --production --json > license-check.json || true

          # Create summary
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY

          if [ -s license-check.json ]; then
            echo "✅ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Allowed Licenses:**" >> $GITHUB_STEP_SUMMARY
            echo "- MIT, ISC" >> $GITHUB_STEP_SUMMARY
            echo "- BSD-2-Clause, BSD-3-Clause" >> $GITHUB_STEP_SUMMARY
            echo "- Apache-2.0" >> $GITHUB_STEP_SUMMARY
            echo "- CC0-1.0, Unlicense, 0BSD" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ License compliance issues found" >> $GITHUB_STEP_SUMMARY
            license-checker --production --csv >> license-summary.csv
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            packages/caci/license-check.json
            packages/caci/license-summary.csv
          retention-days: 30

  docker-security:
    name: CACI Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for security scanning
        uses: docker/build-push-action@v5
        with:
          context: packages/caci
          file: packages/caci/Dockerfile
          push: false
          tags: security-scan:latest
          cache-from: type=gha
          outputs: type=docker,dest=/tmp/security-scan.tar

      - name: Load Docker image
        run: docker load < /tmp/security-scan.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'

      - name: Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security || echo "Docker Bench Security completed"

  security-policy-check:
    name: CACI Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          echo "## Security Policy Compliance" >> $GITHUB_STEP_SUMMARY

          # Check if SECURITY.md exists
          if [ -f "SECURITY.md" ] || [ -f ".github/SECURITY.md" ]; then
            echo "✅ Security policy found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No security policy found. Consider adding SECURITY.md" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for vulnerability reporting
          if grep -r "security@\|vulnerability\|responsible disclosure" . --include="*.md" > /dev/null; then
            echo "✅ Vulnerability reporting information found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No vulnerability reporting information found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for secure coding practices
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Best Practices Check:**" >> $GITHUB_STEP_SUMMARY

          # Check for hardcoded secrets patterns (excluding legitimate uses)
          POTENTIAL_SECRETS=$(grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]+['\"]" --include="*.ts" --include="*.js" packages/caci/src/ | grep -v "// " | grep -v "process.env" | grep -v "console.log" | grep -v "Error" | grep -v "Object.keys" | grep -v "\\[key:" | wc -l)
          if [ "$POTENTIAL_SECRETS" -gt 0 ]; then
            echo "⚠️ Potential hardcoded secrets found in source code" >> $GITHUB_STEP_SUMMARY
            grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]+['\"]" --include="*.ts" --include="*.js" packages/caci/src/ | grep -v "// " | grep -v "process.env" | grep -v "console.log" | grep -v "Error" | grep -v "Object.keys" | grep -v "\\[key:" >> $GITHUB_STEP_SUMMARY || true
          else
            echo "✅ No obvious hardcoded secrets in source code" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for proper error handling
          if grep -r "try\|catch" --include="*.ts" --include="*.js" packages/caci/src/ > /dev/null; then
            echo "✅ Error handling patterns found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Consider adding more error handling" >> $GITHUB_STEP_SUMMARY
          fi

  security-summary:
    name: CACI Security Scanning Summary
    runs-on: ubuntu-latest
    needs:
      [
        dependency-review,
        npm-audit,
        snyk-security-scan,
        codeql-analysis,
        semgrep-scan,
        secret-scanning,
        license-compliance,
        docker-security,
        security-policy-check,
      ]
    if: always()

    steps:
      - name: Security Summary
        run: |
          echo "## Security Scanning Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Audit | ${{ needs.npm-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk Security | ${{ needs.snyk-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep Scan | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ${{ needs.security-policy-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Calculate overall security status
          FAILED_JOBS=0
          if [[ "${{ needs.npm-audit.result }}" == "failure" ]]; then ((FAILED_JOBS++)); fi
          if [[ "${{ needs.snyk-security-scan.result }}" == "failure" ]]; then ((FAILED_JOBS++)); fi
          if [[ "${{ needs.codeql-analysis.result }}" == "failure" ]]; then ((FAILED_JOBS++)); fi
          if [[ "${{ needs.secret-scanning.result }}" == "failure" ]]; then ((FAILED_JOBS++)); fi
          if [[ "${{ needs.license-compliance.result }}" == "failure" ]]; then ((FAILED_JOBS++)); fi

          if [ $FAILED_JOBS -eq 0 ]; then
            echo "🔒 **All security scans passed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [ $FAILED_JOBS -le 2 ]; then
            echo "⚠️ **Some security issues found. Please review the results above.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Multiple security issues found. Immediate attention required!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
