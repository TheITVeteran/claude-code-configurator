name: CACI Linting & Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: CACI ESLint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: caci/node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('caci/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Run ESLint
        working-directory: caci
        run: npx eslint src/ --ext .ts,.tsx,.js,.jsx --format=json --output-file=eslint-report.json || true

      - name: Run ESLint with stylish output (allow warnings)
        working-directory: caci
        run: npx eslint src/ tests/ --ext .ts,.tsx,.js,.jsx --max-warnings 200 || echo "ESLint found issues but continuing..."
        continue-on-error: true

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: caci/eslint-report.json
          retention-days: 30

  prettier:
    name: CACI Prettier Code Formatting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: caci/node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('caci/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Check Prettier formatting
        working-directory: caci
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}" "*.{json,md,yml,yaml}"

      - name: Show Prettier diff (if formatting issues found)
        if: failure()
        working-directory: caci
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}" "*.{json,md,yml,yaml}" --list-different

  typescript:
    name: CACI TypeScript Type Checking
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: caci/node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('caci/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: TypeScript compilation check
        working-directory: caci
        run: npx tsc --noEmit

      - name: TypeScript strict mode check
        working-directory: caci
        run: npx tsc --noEmit --strict

  dependency-vulnerability:
    name: CACI Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Run npm audit
        working-directory: caci
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (dry run)
        working-directory: caci
        run: npm audit fix --dry-run

      - name: Check for known vulnerabilities with Snyk
        if: github.event_name != 'pull_request'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --dev caci/
        continue-on-error: true

  license-check:
    name: CACI License Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        working-directory: caci
        run: license-checker --onlyAllow 'MIT;ISC;BSD-2-Clause;BSD-3-Clause;Apache-2.0;CC0-1.0;Unlicense;0BSD' --production

      - name: Generate license report
        working-directory: caci
        run: license-checker --json --out license-report.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: caci/license-report.json
          retention-days: 30

  code-quality:
    name: CACI Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Build project
        working-directory: caci
        run: npm run build

      - name: Run tests with coverage
        working-directory: caci
        run: npm run test:coverage

      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=caci
            -Dsonar.organization=eladbenhaim
            -Dsonar.sources=caci/src
            -Dsonar.tests=caci/tests
            -Dsonar.typescript.lcov.reportPaths=caci/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts
        continue-on-error: true

      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Code complexity analysis
        working-directory: caci
        run: |
          npx madge --circular src/
          npx madge --image dependency-graph.svg src/

      - name: Upload dependency graph
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph
          path: caci/dependency-graph.svg
          retention-days: 30

  lint-summary:
    name: CACI Lint Summary
    runs-on: ubuntu-latest
    needs: [lint, prettier, typescript, dependency-vulnerability, license-check, code-quality]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Linting & Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Prettier | ${{ needs.prettier.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ needs.typescript.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerability Scan | ${{ needs.dependency-vulnerability.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY