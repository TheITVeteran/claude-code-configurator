name: 'CACI Package Release'

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean
      publish_npm:
        description: 'Publish to NPM'
        required: false
        default: true
        type: boolean
      publish_docker:
        description: 'Publish to Docker Hub'
        required: false
        default: true
        type: boolean
      publish_deb:
        description: 'Create DEB package'
        required: false
        default: true
        type: boolean
      publish_homebrew:
        description: 'Update Homebrew formula'
        required: false
        default: true
        type: boolean
      publish_apt:
        description: 'Publish to APT repository'
        required: false
        default: true
        type: boolean

defaults:
  run:
    shell: bash
    working-directory: packages/caci

env:
  NODE_OPTIONS: --max-old-space-size=4096

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # ============================================================================
  # PREPARATION JOB: Version bump, build, and prepare artifacts
  # ============================================================================
  prepare-release:
    name: 'Prepare Release'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version_bump.outputs.new }}
      current_version: ${{ steps.current_version.outputs.current }}
      should_release: ${{ steps.version_bump.outputs.should_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.1.0
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run all tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version_bump
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN MODE - No actual version bump"
            NEW_VERSION=$(npm version ${{ inputs.version_bump }} --no-git-tag-version --dry-run)
            echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "📦 Bumping version: ${{ inputs.version_bump }}"
            NEW_VERSION=$(npm version ${{ inputs.version_bump }} --no-git-tag-version)
            echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Update package-lock.json
        if: inputs.dry_run == false
        run: npm install --package-lock-only

      - name: Create release artifacts
        run: |
          echo "📦 Creating release artifacts..."

          # Package the CLI
          npm pack

          # Create installation scripts
          cat > install-caci.sh << 'EOF'
          #!/bin/bash
          # CACI Installation Script
          set -e
          echo "🚀 Installing CACI (Code Assistant Configuration Interface)..."
          npm install -g caci
          echo "✅ CACI installed successfully!"
          echo "💡 Usage: caci configure"
          echo "📖 Help:  caci --help"
          EOF
          chmod +x install-caci.sh

          # Create PowerShell install script for Windows
          cat > install-caci.ps1 << 'EOF'
          # CACI Installation Script for Windows
          Write-Host "🚀 Installing CACI (Code Assistant Configuration Interface)..." -ForegroundColor Green
          try {
              npm install -g caci
              Write-Host "✅ CACI installed successfully!" -ForegroundColor Green
              Write-Host "💡 Usage: caci configure" -ForegroundColor Cyan
              Write-Host "📖 Help:  caci --help" -ForegroundColor Cyan
          } catch {
              Write-Host "❌ Installation failed: $_" -ForegroundColor Red
              exit 1
          }
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: caci-release-artifacts
          path: |
            packages/caci/caci-*.tgz
            packages/caci/install-caci.sh
            packages/caci/install-caci.ps1
            packages/caci/dist/**
          retention-days: 30

      - name: Commit version bump
        if: inputs.dry_run == false
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new }}

          🔖 Release ${{ steps.version_bump.outputs.new }}
          - Automated version bump via GitHub Actions
          - All tests passing
          - Ready for multi-platform release

          🤖 Generated with [Claude Code](https://claude.ai/code)"

      - name: Create Git tag
        if: inputs.dry_run == false
        run: |
          git tag -a "${{ steps.version_bump.outputs.new }}" -m "Release ${{ steps.version_bump.outputs.new }}

          🚀 CACI Package Release ${{ steps.version_bump.outputs.new }}

          This release includes:
          - All core functionality tested and working
          - Multi-platform support (Linux, macOS, Windows)
          - Available via npm, Docker, DEB packages, and Homebrew

          📦 Install: npm install -g caci
          🐳 Docker: docker run --rm caci --help
          🍺 Homebrew: brew install caci
          📥 DEB: Download from releases

          🤖 Generated with [Claude Code](https://claude.ai/code)"

      - name: Push changes and tags
        if: inputs.dry_run == false
        run: |
          git push origin master
          git push origin "${{ steps.version_bump.outputs.new }}"

  # ============================================================================
  # NPM PUBLISHING JOB
  # ============================================================================
  publish-npm:
    name: 'Publish to NPM'
    needs: prepare-release
    if: inputs.publish_npm && needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.1.0
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        run: |
          echo "📦 Publishing CACI v${{ needs.prepare-release.outputs.version }} to NPM..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          echo "🔍 Verifying NPM publication..."
          sleep 30  # Wait for NPM to propagate
          npm info caci@${{ needs.prepare-release.outputs.version }} --json

  # ============================================================================
  # DOCKER PUBLISHING JOB
  # ============================================================================
  publish-docker:
    name: 'Publish to Docker Hub'
    needs: prepare-release
    if: inputs.publish_docker && needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: packages/caci
          file: packages/caci/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/caci:latest
            ${{ secrets.DOCKER_USERNAME }}/caci:${{ needs.prepare-release.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/caci:v${{ needs.prepare-release.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          echo "🔍 Verifying Docker image..."
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/caci:${{ needs.prepare-release.outputs.version }} --version
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/caci:${{ needs.prepare-release.outputs.version }} --help

  # ============================================================================
  # DEBIAN PACKAGE JOB
  # ============================================================================
  publish-deb:
    name: 'Create DEB Package'
    needs: prepare-release
    if: inputs.publish_deb && needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.1.0
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Download release artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: caci-release-artifacts
          path: packages/caci

      - name: Install DEB packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev build-essential fakeroot

      - name: Create DEB package structure
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Remove 'v' prefix if present
          DEB_VERSION=${VERSION#v}

          echo "📦 Creating DEB package for version $DEB_VERSION..."

          # Create package directory structure
          mkdir -p caci_${DEB_VERSION}_all/DEBIAN
          mkdir -p caci_${DEB_VERSION}_all/usr/local/lib/nodejs/caci
          mkdir -p caci_${DEB_VERSION}_all/usr/local/bin

          # Copy application files
          cp -r dist/* caci_${DEB_VERSION}_all/usr/local/lib/nodejs/caci/
          cp -r node_modules caci_${DEB_VERSION}_all/usr/local/lib/nodejs/caci/
          cp package.json caci_${DEB_VERSION}_all/usr/local/lib/nodejs/caci/

          # Create control file
          cat > caci_${DEB_VERSION}_all/DEBIAN/control << EOF
          Package: caci
          Version: ${DEB_VERSION}
          Section: devel
          Priority: optional
          Architecture: all
          Depends: nodejs (>= 18.0.0), npm
          Maintainer: CACI Development Team <noreply@github.com>
          Description: Code Assistant Configuration Interface
           CACI is an intelligent CLI tool that automates Claude Code project 
           configuration by analyzing requirements and using AI to recommend 
           relevant agents, commands, MCPs, and hooks from a large component pool.
           .
           This package provides the CACI command-line interface for easy
           project setup and configuration management.
          Homepage: https://github.com/elad12390/claude-code-configurator
          EOF

          # Create postinst script to create symlink
          cat > caci_${DEB_VERSION}_all/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          ln -sf /usr/local/lib/nodejs/caci/bin/caci /usr/local/bin/caci
          echo "CACI installed successfully!"
          echo "Usage: caci configure"
          EOF
          chmod 755 caci_${DEB_VERSION}_all/DEBIAN/postinst

          # Create prerm script to remove symlink
          cat > caci_${DEB_VERSION}_all/DEBIAN/prerm << 'EOF'
          #!/bin/bash
          set -e
          rm -f /usr/local/bin/caci
          EOF
          chmod 755 caci_${DEB_VERSION}_all/DEBIAN/prerm

          # Build the package
          dpkg-deb --build caci_${DEB_VERSION}_all

          echo "✅ DEB package created: caci_${DEB_VERSION}_all.deb"
          ls -la caci_*.deb

      - name: Upload DEB package
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: caci-deb-package
          path: packages/caci/caci_*.deb
          retention-days: 90

  # ============================================================================
  # HOMEBREW FORMULA JOB
  # ============================================================================
  publish-homebrew:
    name: 'Update Homebrew Formula'
    needs: [prepare-release, publish-npm]
    if: inputs.publish_homebrew && needs.prepare-release.outputs.should_release == 'true'
    runs-on: macos-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Download release artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: caci-release-artifacts
          path: packages/caci

      - name: Create macOS DMG installer
        run: |
          cd packages/caci

          echo "🍎 Creating macOS DMG installer..."
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Create DMG structure
          mkdir -p dmg-contents

          # Copy the packaged CLI
          PKG_FILE=$(ls caci-*.tgz | head -1)
          cp "$PKG_FILE" dmg-contents/

          # Create macOS installation script
          cat > dmg-contents/install-caci-macos.sh << 'EOF'
          #!/bin/bash
          # CACI macOS Installer
          set -e
          echo "🍎 Installing CACI for macOS..."
          echo "======================================"

          # Check if Node.js is installed
          if ! command -v node &> /dev/null; then
              echo "❌ Node.js is required but not installed."
              echo "📥 Please install Node.js first: https://nodejs.org/"
              exit 1
          fi

          # Check if npm is available
          if ! command -v npm &> /dev/null; then
              echo "❌ npm is required but not installed."
              exit 1
          fi

          echo "✅ Node.js $(node --version) detected"
          echo "✅ npm $(npm --version) detected"
          echo ""
          echo "🚀 Installing CACI globally..."
          npm install -g caci
          echo ""
          echo "✅ CACI installed successfully!"
          echo "======================================"
          echo "💡 Usage: caci configure"
          echo "📖 Help:  caci --help"
          echo "🎉 Happy coding with CACI!"
          EOF
          chmod +x dmg-contents/install-caci-macos.sh

          # Create DMG using hdiutil (always available on macOS runners)
          hdiutil create -volname "CACI Installer" -srcfolder dmg-contents -ov -format UDZO "CACI-${VERSION}.dmg"
          echo "✅ DMG created: CACI-${VERSION}.dmg"

      - name: Update Homebrew Formula
        run: |
          cd packages/caci

          echo "🍺 Creating Homebrew formula..."
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NO_V=${VERSION#v}

          # Wait for NPM to propagate (needed for Homebrew to fetch)
          echo "⏳ Waiting for NPM propagation..."
          sleep 60

          # Get the .tgz file info for Homebrew
          PKG_FILE=$(ls caci-*.tgz | head -1)
          PKG_SHA256=$(shasum -a 256 "$PKG_FILE" | cut -d' ' -f1)

          echo "Package: $PKG_FILE"
          echo "SHA256: $PKG_SHA256"

          # Create Homebrew formula
          cat > caci.rb << EOF
          class Caci < Formula
            desc "Code Assistant Configuration Interface - Intelligent Claude Code project configurator"
            homepage "https://github.com/elad12390/claude-code-configurator"
            url "https://registry.npmjs.org/caci/-/caci-${VERSION_NO_V}.tgz"
            sha256 "${PKG_SHA256}"
            license "MIT"
            version "${VERSION_NO_V}"

            depends_on "node"

            def install
              system "npm", "install", *Language::Node.std_npm_install_args(libexec)
              bin.install_symlink Dir["#{libexec}/bin/*"]
            end

            test do
              assert_match "#{version}", shell_output("#{bin}/caci --version")
              # Test help command
              assert_match "configure", shell_output("#{bin}/caci --help")
            end
          end
          EOF

          echo "✅ Homebrew formula created: caci.rb"

      - name: Upload Homebrew artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: caci-homebrew-artifacts
          path: |
            packages/caci/caci.rb
            packages/caci/CACI-*.dmg
          retention-days: 90

  # ============================================================================
  # APT REPOSITORY JOB
  # ============================================================================
  publish-apt:
    name: 'Publish to APT Repository'
    needs: [prepare-release, publish-deb]
    if: inputs.publish_apt && needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Download DEB package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: caci-deb-package
          path: packages/caci

      - name: Install APT repository tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gnupg2

      - name: Setup GPG for package signing
        run: |
          echo "🔑 Setting up GPG for package signing..."

          # Import GPG private key for signing
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import --batch
            echo "✅ GPG key imported"
          else
            echo "⚠️ No GPG_PRIVATE_KEY secret found, creating temporary key for demo"
            # Create a temporary GPG key for development (NOT for production)
            gpg --batch --gen-key <<EOF
          %no-protection
          Key-Type: RSA
          Key-Length: 2048
          Subkey-Type: RSA
          Subkey-Length: 2048
          Name-Real: CACI Package Signing
          Name-Email: packages@caci.dev
          Expire-Date: 1y
          %commit
          EOF
          fi

          # List available keys
          gpg --list-secret-keys

      - name: Create APT repository structure
        run: |
          cd packages/caci
          VERSION="${{ needs.prepare-release.outputs.version }}"
          DEB_VERSION=${VERSION#v}

          echo "📦 Creating APT repository for CACI v$DEB_VERSION..."

          # Create repository directory structure
          mkdir -p apt-repo/pool/main/c/caci
          mkdir -p apt-repo/dists/stable/main/binary-amd64
          mkdir -p apt-repo/dists/stable/main/binary-arm64
          mkdir -p apt-repo/dists/stable/main/source

          # Copy DEB package to pool
          DEB_FILE=$(ls caci_*.deb | head -1)
          cp "$DEB_FILE" apt-repo/pool/main/c/caci/

          echo "✅ Repository structure created"
          ls -la apt-repo/pool/main/c/caci/

      - name: Generate APT repository metadata
        run: |
          cd packages/caci/apt-repo

          echo "📝 Generating APT repository metadata..."

          # Generate Packages file for binary-amd64
          dpkg-scanpackages pool/main > dists/stable/main/binary-amd64/Packages
          gzip -k dists/stable/main/binary-amd64/Packages

          # For now, copy amd64 to arm64 (since our package is architecture: all)
          cp dists/stable/main/binary-amd64/Packages dists/stable/main/binary-arm64/Packages
          cp dists/stable/main/binary-amd64/Packages.gz dists/stable/main/binary-arm64/Packages.gz

          # Create empty Sources file
          touch dists/stable/main/source/Sources
          gzip -k dists/stable/main/source/Sources

          # Generate Release file
          cat > dists/stable/Release << EOF
          Origin: CACI
          Label: CACI Package Repository
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64 arm64
          Components: main
          Description: CACI (Code Assistant Configuration Interface) Package Repository
          Date: $(date -Ru)
          EOF

          # Add file hashes to Release
          echo "MD5Sum:" >> dists/stable/Release
          find dists/stable -name "Packages*" -o -name "Sources*" | while read file; do
            echo " $(md5sum "$file" | cut -d' ' -f1) $(stat -c%s "$file") ${file#dists/stable/}"
          done >> dists/stable/Release

          echo "SHA1:" >> dists/stable/Release
          find dists/stable -name "Packages*" -o -name "Sources*" | while read file; do
            echo " $(sha1sum "$file" | cut -d' ' -f1) $(stat -c%s "$file") ${file#dists/stable/}"
          done >> dists/stable/Release

          echo "SHA256:" >> dists/stable/Release
          find dists/stable -name "Packages*" -o -name "Sources*" | while read file; do
            echo " $(sha256sum "$file" | cut -d' ' -f1) $(stat -c%s "$file") ${file#dists/stable/}"
          done >> dists/stable/Release

          echo "✅ Release file generated"

      - name: Sign APT repository
        run: |
          cd packages/caci/apt-repo

          echo "🔏 Signing APT repository..."

          # Sign the Release file
          gpg --batch --yes --detach-sign --armor -o dists/stable/Release.gpg dists/stable/Release
          gpg --batch --yes --clearsign -o dists/stable/InRelease dists/stable/Release

          echo "✅ Repository signed"

          # Export public key for users
          gpg --armor --export packages@caci.dev > caci-archive-keyring.gpg

          echo "📋 Repository ready!"

      - name: Create APT installation instructions
        run: |
          cd packages/caci

          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Create installation script for APT repository
          cat > install-caci-apt.sh << 'EOF'
          #!/bin/bash
          # CACI APT Repository Installation Script

          set -e

          echo "🔧 Adding CACI APT Repository..."
          echo "=================================="

          # Check if running as root or with sudo
          if [ "$EUID" -ne 0 ]; then
              echo "❌ This script requires root privileges."
              echo "💡 Please run with: sudo $0"
              exit 1
          fi

          # Check if running on Debian/Ubuntu
          if ! command -v apt-get &> /dev/null; then
              echo "❌ APT not found. This script is for Debian/Ubuntu systems only."
              exit 1
          fi

          # Add GPG key
          echo "🔑 Adding CACI repository GPG key..."
          curl -fsSL https://github.com/elad12390/claude-code-configurator/releases/latest/download/caci-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/caci-archive-keyring.gpg

          # Add repository to sources.list.d
          echo "📦 Adding CACI repository..."
          echo "deb [signed-by=/usr/share/keyrings/caci-archive-keyring.gpg] https://github.com/elad12390/claude-code-configurator/releases/latest/download/apt-repo stable main" > /etc/apt/sources.list.d/caci.list

          # Update package lists
          echo "🔄 Updating package lists..."
          apt-get update

          # Install CACI
          echo "🚀 Installing CACI..."
          apt-get install -y caci

          echo ""
          echo "✅ CACI installed successfully via APT!"
          echo "=================================="
          echo "💡 Usage: caci configure"
          echo "📖 Help:  caci --help"
          echo "🔧 Update: sudo apt update && sudo apt upgrade caci"
          echo ""
          echo "🎉 Happy coding with CACI!"
          EOF
          chmod +x install-caci-apt.sh

          # Create simple installation instructions
          cat > APT-INSTALL.md << EOF
          # CACI APT Repository Installation

          ## Quick Install (Recommended)

          \`\`\`bash
          # Download and run the installation script
          curl -fsSL https://github.com/elad12390/claude-code-configurator/releases/latest/download/install-caci-apt.sh | sudo bash
          \`\`\`

          ## Manual Installation

          \`\`\`bash
          # 1. Add GPG key
          curl -fsSL https://github.com/elad12390/claude-code-configurator/releases/latest/download/caci-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/caci-archive-keyring.gpg

          # 2. Add repository
          echo "deb [signed-by=/usr/share/keyrings/caci-archive-keyring.gpg] https://github.com/elad12390/claude-code-configurator/releases/latest/download/apt-repo stable main" | sudo tee /etc/apt/sources.list.d/caci.list

          # 3. Update and install
          sudo apt update
          sudo apt install caci
          \`\`\`

          ## Usage

          \`\`\`bash
          # Configure Claude Code project
          caci configure

          # Get help
          caci --help

          # Update CACI
          sudo apt update && sudo apt upgrade caci
          \`\`\`

          ## Uninstall

          \`\`\`bash
          # Remove package
          sudo apt remove caci

          # Remove repository
          sudo rm /etc/apt/sources.list.d/caci.list
          sudo rm /usr/share/keyrings/caci-archive-keyring.gpg
          sudo apt update
          \`\`\`
          EOF

          echo "✅ APT installation instructions created"

      - name: Upload APT repository artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: caci-apt-repository
          path: |
            packages/caci/apt-repo/**
            packages/caci/caci-archive-keyring.gpg
            packages/caci/install-caci-apt.sh
            packages/caci/APT-INSTALL.md
          retention-days: 90

  # ============================================================================
  # GITHUB RELEASE JOB - Aggregates all artifacts
  # ============================================================================
  create-github-release:
    name: 'Create GitHub Release'
    needs:
      [
        prepare-release,
        publish-npm,
        publish-docker,
        publish-deb,
        publish-homebrew,
        publish-apt,
      ]
    if: always() && needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.0
        with:
          ref: ${{ needs.prepare-release.outputs.version }}

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: release-artifacts

      - name: Generate comprehensive changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          DATE=$(date +"%Y-%m-%d")

          cat > changelog_entry.md << EOF
          ## 🚀 CACI ${VERSION} - Multi-Platform Release

          **Release Date:** ${DATE}

          ### 📦 Installation Options

          #### NPM (Recommended)
          \`\`\`bash
          npm install -g caci@${VERSION}
          \`\`\`

          #### Docker
          \`\`\`bash
          docker run --rm caci:${VERSION} --help
          \`\`\`

          #### Homebrew (macOS/Linux)
          \`\`\`bash
          brew install caci  # (after formula submission)
          \`\`\`

          #### APT (Ubuntu/Debian)
          \`\`\`bash
          # Quick install via APT repository
          curl -fsSL https://github.com/elad12390/claude-code-configurator/releases/latest/download/install-caci-apt.sh | sudo bash
          \`\`\`

          #### DEB Package (Manual)
          \`\`\`bash
          # Download caci_${VERSION#v}_all.deb from this release
          sudo dpkg -i caci_${VERSION#v}_all.deb
          \`\`\`

          #### Direct Download
          - **🍎 macOS**: Download CACI-${VERSION}.dmg
          - **🐧 Linux**: Download install-caci.sh
          - **🪟 Windows**: Download install-caci.ps1

          ### ✨ What's New in ${VERSION}

          - 🔧 Complete CLI tool for Claude Code configuration
          - 🤖 AI-powered component recommendations  
          - 📦 Multi-platform support (npm, Docker, DEB, Homebrew)
          - 🔒 Safe backup and restore functionality
          - 📊 Configuration history and iteration tracking
          - 🎯 Production-ready with comprehensive testing

          ### 🚀 Quick Start

          \`\`\`bash
          # Install CACI
          npm install -g caci

          # Configure your Claude Code project
          caci configure

          # View help
          caci --help
          \`\`\`

          ### 🔧 Technical Details

          - **Node.js**: 18+ required
          - **Platforms**: Linux, macOS, Windows
          - **Package formats**: NPM, Docker, APT, DEB, Homebrew
          - **Size**: ~2MB (compressed)

          ---

          📖 **Documentation**: https://github.com/elad12390/claude-code-configurator  
          🐛 **Issues**: https://github.com/elad12390/claude-code-configurator/issues  
          💬 **Support**: GitHub Discussions

          🤖 Generated with [Claude Code](https://claude.ai/code)
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: 'CACI ${{ needs.prepare-release.outputs.version }} - Multi-Platform Release'
          body_path: changelog_entry.md
          files: |
            release-artifacts/caci-release-artifacts/caci-*.tgz
            release-artifacts/caci-release-artifacts/install-caci.sh
            release-artifacts/caci-release-artifacts/install-caci.ps1
            release-artifacts/caci-deb-package/caci_*.deb
            release-artifacts/caci-homebrew-artifacts/caci.rb
            release-artifacts/caci-homebrew-artifacts/CACI-*.dmg
            release-artifacts/caci-apt-repository/apt-repo/**
            release-artifacts/caci-apt-repository/caci-archive-keyring.gpg
            release-artifacts/caci-apt-repository/install-caci-apt.sh
            release-artifacts/caci-apt-repository/APT-INSTALL.md
          draft: false
          prerelease: false

  # ============================================================================
  # RELEASE SUMMARY JOB
  # ============================================================================
  release-summary:
    name: 'Release Summary'
    needs:
      [
        prepare-release,
        publish-npm,
        publish-docker,
        publish-deb,
        publish-homebrew,
        publish-apt,
        create-github-release,
      ]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate Release Summary
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "## 🔍 DRY RUN SUMMARY" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**No actual release was created**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🚀 Multi-Platform Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| Component | Status | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Bump | ${{ needs.prepare-release.result == 'success' && '✅ Success' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.current_version }} → ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Publish | ${{ needs.publish-npm.result == 'success' && '✅ Published' || needs.publish-npm.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Hub | ${{ needs.publish-docker.result == 'success' && '✅ Published' || needs.publish-docker.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DEB Package | ${{ needs.publish-deb.result == 'success' && '✅ Created' || needs.publish-deb.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| APT Repository | ${{ needs.publish-apt.result == 'success' && '✅ Published' || needs.publish-apt.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Homebrew | ${{ needs.publish-homebrew.result == 'success' && '✅ Updated' || needs.publish-homebrew.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-github-release.result == 'success' && '✅ Created' || needs.create-github-release.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.prepare-release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.dry_run }}" = "false" ] && [ "${{ needs.prepare-release.outputs.should_release }}" = "true" ]; then
            echo "### 🎉 Release ${{ needs.prepare-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Installation Commands:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 **NPM**: \`npm install -g caci@${{ needs.prepare-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "🐳 **Docker**: \`docker run --rm caci:${{ needs.prepare-release.outputs.version }} --help\`" >> $GITHUB_STEP_SUMMARY
            echo "🔧 **APT**: \`curl -fsSL https://github.com/elad12390/claude-code-configurator/releases/latest/download/install-caci-apt.sh | sudo bash\`" >> $GITHUB_STEP_SUMMARY
            echo "🍺 **Homebrew**: \`brew install caci\` (after formula submission)" >> $GITHUB_STEP_SUMMARY
            echo "📥 **DEB**: Download from GitHub Releases" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Quick Start**: \`caci configure\`" >> $GITHUB_STEP_SUMMARY
          fi
