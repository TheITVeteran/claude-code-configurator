name: 'CACI Package E2E Tests'

# This workflow runs comprehensive E2E tests on a schedule
# Basic E2E testing is now handled by the main CI pipeline (ci.yml)
# This provides additional comprehensive E2E scenarios

on:
  schedule:
    # Run comprehensive E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'E2E test suite to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - regression

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  e2e-cli:
    name: CACI E2E CLI Testing
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache E2E testing artifacts
        uses: actions/cache@v4
        id: cache-e2e
        with:
          path: |
            packages/caci/node_modules
            packages/caci/dist
            ~/.npm
            ~/.cache/npm
            packages/caci/node_modules/.cache
            ${{ runner.os == 'Windows' && '%APPDATA%/npm-cache' || '~/.cache/npm' }}
            ${{ runner.os == 'macOS' && '~/Library/Caches/npm' || '' }}
          key: ${{ runner.os }}-e2e-${{ matrix.node-version }}-${{ hashFiles('packages/caci/package-lock.json') }}-${{ hashFiles('packages/caci/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-e2e-${{ matrix.node-version }}-${{ hashFiles('packages/caci/package-lock.json') }}-
            ${{ runner.os }}-e2e-${{ matrix.node-version }}-
            ${{ runner.os }}-e2e-

      - name: Install dependencies
        if: steps.cache-e2e.outputs.cache-hit != 'true'
        working-directory: packages/caci
        run: npm ci

      - name: Build project
        working-directory: packages/caci
        run: npm run build

      - name: Create test workspace
        shell: bash
        run: |
          mkdir -p e2e-test-workspace
          cd e2e-test-workspace

          # Create a basic CACI components.json for testing
          cat > components.json << 'EOF'
          {
            "agents": {
              "test-agent": {
                "name": "test-agent",
                "path": "agents/test-agent.md",
                "category": "development",
                "type": "agent",
                "content": "A test development agent for CI/CD testing",
                "description": "Simple test agent for E2E workflow testing"
              }
            },
            "commands": {
              "test-command": {
                "name": "test-command",
                "path": "commands/test.md",
                "category": "testing",
                "type": "command",
                "content": "Test command for CI/CD",
                "description": "Basic test command for E2E validation"
              }
            },
            "hooks": {},
            "mcps": {},
            "settings": {},
            "templates": {}
          }
          EOF

      - name: Test CLI help command
        shell: bash
        run: |
          cd e2e-test-workspace
          node ../packages/caci/dist/cli/index.js --help || echo "Help command test completed"

      - name: Test CLI version command
        shell: bash
        run: |
          cd e2e-test-workspace
          node ../packages/caci/dist/cli/index.js --version || echo "Version command test completed"

      - name: Test CLI with components.json
        shell: bash
        run: |
          cd e2e-test-workspace

          # Test configure command (this will prompt but should handle gracefully)
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Configure command test completed"

          # Test init command
          node ../packages/caci/dist/cli/index.js init --help || echo "Init command test completed"

          # Test history command
          node ../packages/caci/dist/cli/index.js history || echo "History command test completed"

      - name: Test CLI without components.json
        shell: bash
        run: |
          mkdir -p e2e-test-empty
          cd e2e-test-empty

          # Test behavior when no components.json exists
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "No components.json test completed"

      - name: Test CLI with invalid components.json
        shell: bash
        run: |
          mkdir -p e2e-test-invalid
          cd e2e-test-invalid

          # Create invalid JSON
          echo "{ invalid json }" > components.json

          # Test error handling
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Invalid JSON test completed"

      - name: Test CLI with minimal components.json
        shell: bash
        run: |
          mkdir -p e2e-test-minimal
          cd e2e-test-minimal

          # Create minimal valid JSON
          echo "{}" > components.json

          # Test with minimal config
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Minimal config test completed"

  e2e-real-world:
    name: CACI Real World E2E Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm ci

      - name: Build project
        working-directory: packages/caci
        run: npm run build

      - name: Install CLI globally
        working-directory: packages/caci
        run: |
          npm pack
          npm install -g caci-*.tgz

      - name: Test with real world project structure
        run: |
          mkdir -p e2e-realworld-test
          cd e2e-realworld-test

          # Create a realistic CACI components.json
          cat > components.json << 'EOF'
          {
            "agents": {
              "fullstack-dev": {
                "name": "fullstack-dev",
                "path": "agents/fullstack-developer.md",
                "category": "development",
                "type": "agent",
                "content": "Full-stack development agent with React and Node.js expertise",
                "description": "Comprehensive development agent for modern web applications"
              },
              "ui-expert": {
                "name": "ui-expert",
                "path": "agents/ui-expert.md",
                "category": "design",
                "type": "agent",
                "content": "UI/UX expert specializing in React components and design systems",
                "description": "Expert in creating beautiful and functional user interfaces"
              }
            },
            "commands": {
              "build": {
                "name": "build",
                "path": "commands/build.md",
                "category": "build",
                "type": "command",
                "content": "Build and bundle the application for production",
                "description": "Production build command with optimization"
              },
              "test": {
                "name": "test",
                "path": "commands/test.md",
                "category": "testing",
                "type": "command",
                "content": "Run comprehensive test suite",
                "description": "Execute unit, integration, and E2E tests"
              }
            },
            "hooks": {
              "pre-commit": {
                "name": "pre-commit",
                "path": "hooks/pre-commit.md",
                "category": "git",
                "type": "hook",
                "content": "Run linting and formatting before commit",
                "description": "Ensure code quality before committing changes"
              }
            },
            "mcps": {
              "filesystem": {
                "name": "filesystem",
                "path": "mcps/filesystem.md",
                "category": "system",
                "type": "mcp",
                "content": "File system operations and management",
                "description": "Provides file system access and manipulation capabilities"
              }
            },
            "settings": {},
            "templates": {}
          }
          EOF


          # Test CLI with this setup
          caci --help
          echo "q" | caci configure || echo "Real world test completed"
          caci init --help || echo "Init help test completed"
          caci history || echo "History test completed"

      - name: Test with API key scenarios
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          mkdir -p e2e-api-test
          cd e2e-api-test

          # Create components.json  
          cat > components.json << 'EOF'
          {
            "agents": {
              "api-test-agent": {
                "name": "api-test-agent",
                "path": "agents/api-test.md",
                "category": "testing",
                "type": "agent",
                "content": "API testing specialist agent",
                "description": "Expert in API testing and validation with authentication"
              }
            },
            "commands": {},
            "hooks": {},
            "mcps": {},
            "settings": {},
            "templates": {}
          }
          EOF

          if [ -n "$GOOGLE_API_KEY" ]; then
            echo "Testing with API key..."
            echo "q" | caci configure || echo "API key test completed"
          else
            echo "Testing without API key..."
            echo "q" | caci configure || echo "No API key test completed"
          fi

      - name: Test edge cases
        run: |
          # Test with very large components.json
          mkdir -p e2e-large-config
          cd e2e-large-config

          # Generate a large CACI configuration
          cat > components.json << 'EOF'
          {
            "agents": {
              "architect": {
                "name": "architect",
                "path": "agents/architect.md",
                "category": "architecture",
                "type": "agent",
                "content": "System architecture and design expert",
                "description": "Designs scalable and maintainable system architectures"
              },
              "backend-dev": {
                "name": "backend-dev",
                "path": "agents/backend-developer.md",
                "category": "development",
                "type": "agent",
                "content": "Backend development specialist",
                "description": "Expert in server-side development and APIs"
              },
              "frontend-dev": {
                "name": "frontend-dev",
                "path": "agents/frontend-developer.md",
                "category": "development",
                "type": "agent",
                "content": "Frontend development specialist",
                "description": "Expert in modern frontend frameworks and UI development"
              },
              "devops": {
                "name": "devops",
                "path": "agents/devops.md",
                "category": "operations",
                "type": "agent",
                "content": "DevOps and infrastructure specialist",
                "description": "Expert in CI/CD, containerization, and cloud deployment"
              },
              "qa": {
                "name": "qa",
                "path": "agents/qa.md",
                "category": "quality",
                "type": "agent",
                "content": "Quality assurance and testing expert",
                "description": "Comprehensive testing strategy and implementation"
              }
            },
            "commands": {
              "build": {
                "name": "build",
                "path": "commands/build.md",
                "category": "build",
                "type": "command",
                "content": "Production build with optimization",
                "description": "Build application for production deployment"
              },
              "dev": {
                "name": "dev",
                "path": "commands/dev.md",
                "category": "development",
                "type": "command",
                "content": "Development server with hot reload",
                "description": "Start development environment"
              },
              "test": {
                "name": "test",
                "path": "commands/test.md",
                "category": "testing",
                "type": "command",
                "content": "Run full test suite",
                "description": "Execute all tests with coverage"
              },
              "lint": {
                "name": "lint",
                "path": "commands/lint.md",
                "category": "quality",
                "type": "command",
                "content": "Code linting and formatting",
                "description": "Analyze and fix code quality issues"
              },
              "deploy": {
                "name": "deploy",
                "path": "commands/deploy.md",
                "category": "deployment",
                "type": "command",
                "content": "Deploy to production environment",
                "description": "Automated deployment pipeline"
              }
            },
            "hooks": {
              "pre-commit": {
                "name": "pre-commit",
                "path": "hooks/pre-commit.md",
                "category": "git",
                "type": "hook",
                "content": "Pre-commit quality checks",
                "description": "Run linting, formatting, and tests before commit"
              },
              "pre-push": {
                "name": "pre-push",
                "path": "hooks/pre-push.md",
                "category": "git",
                "type": "hook",
                "content": "Pre-push validation",
                "description": "Comprehensive checks before pushing code"
              }
            },
            "mcps": {
              "filesystem": {
                "name": "filesystem",
                "path": "mcps/filesystem.md",
                "category": "system",
                "type": "mcp",
                "content": "File system operations",
                "description": "Comprehensive file system access and management"
              },
              "database": {
                "name": "database",
                "path": "mcps/database.md",
                "category": "data",
                "type": "mcp",
                "content": "Database operations and queries",
                "description": "Database connection and query execution"
              },
              "api": {
                "name": "api",
                "path": "mcps/api.md",
                "category": "network",
                "type": "mcp",
                "content": "HTTP API client",
                "description": "RESTful API communication and integration"
              }
            },
            "settings": {},
            "templates": {}
          }
          EOF

          echo "q" | caci configure || echo "Large config test completed"

  e2e-file-operations:
    name: CACI E2E File Operations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm ci

      - name: Build project
        working-directory: packages/caci
        run: npm run build

      - name: Test file system operations
        run: |
          mkdir -p e2e-fs-test
          cd e2e-fs-test

          # Create a project structure
          mkdir -p {src,lib,components,pages,app}

          # Create CACI components.json
          cat > components.json << 'EOF'
          {
            "agents": {
              "dev-agent": {
                "name": "dev-agent",
                "path": "agents/developer.md",
                "category": "development",
                "type": "agent",
                "content": "General development agent",
                "description": "Versatile development assistant"
              }
            },
            "commands": {
              "build": {
                "name": "build",
                "path": "commands/build.md",
                "category": "build",
                "type": "command",
                "content": "Build the project",
                "description": "Production build process"
              }
            },
            "hooks": {},
            "mcps": {},
            "settings": {},
            "templates": {}
          }
          EOF

          # Test reading configuration
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "File operations test completed"

          # Check if any backup files were created
          ls -la || true

      - name: Test backup functionality
        run: |
          mkdir -p e2e-backup-test
          cd e2e-backup-test

          # Create original components.json
          echo '{"original": true}' > components.json

          # Run CLI command that might create backups
          echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Backup test completed"

          # Check for backup files
          find . -name "*.backup*" -o -name "*backup*" || echo "No backup files found"

  e2e-performance:
    name: CACI E2E Performance Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        working-directory: packages/caci
        run: npm ci

      - name: Build project
        working-directory: packages/caci
        run: npm run build

      - name: Performance test with time measurement
        run: |
          mkdir -p e2e-perf-test
          cd e2e-perf-test

          # Create CACI components.json
          cat > components.json << 'EOF'
          {
            "agents": {
              "performance-agent": {
                "name": "performance-agent",
                "path": "agents/performance.md",
                "category": "optimization",
                "type": "agent",
                "content": "Performance optimization specialist",
                "description": "Expert in application performance tuning"
              }
            },
            "commands": {
              "benchmark": {
                "name": "benchmark",
                "path": "commands/benchmark.md",
                "category": "performance",
                "type": "command",
                "content": "Performance benchmarking",
                "description": "Measure and analyze performance metrics"
              }
            },
            "hooks": {},
            "mcps": {},
            "settings": {},
            "templates": {}
          }
          EOF

          # Measure execution time
          echo "Testing CLI performance..."
          time echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Performance test completed"

      - name: Memory usage test
        run: |
          cd e2e-perf-test

          # Monitor memory usage during execution
          /usr/bin/time -v echo "q" | node ../packages/caci/dist/cli/index.js configure || echo "Memory test completed"

  e2e-summary:
    name: CACI E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-cli, e2e-real-world, e2e-file-operations, e2e-performance]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## E2E Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Testing | ${{ needs.e2e-cli.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Real World Testing | ${{ needs.e2e-real-world.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Operations | ${{ needs.e2e-file-operations.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Testing | ${{ needs.e2e-performance.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.e2e-cli.result }}" == "failure" || "${{ needs.e2e-real-world.result }}" == "failure" || "${{ needs.e2e-file-operations.result }}" == "failure" || "${{ needs.e2e-performance.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Some E2E tests failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All E2E tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
