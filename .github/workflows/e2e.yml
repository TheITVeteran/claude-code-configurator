name: CACI E2E Testing

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  e2e-cli:
    name: CACI E2E CLI Testing
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Build project
        working-directory: caci
        run: npm run build

      - name: Create test workspace
        shell: bash
        run: |
          mkdir -p e2e-test-workspace
          cd e2e-test-workspace
          
          # Create a basic components.json for testing
          cat > components.json << 'EOF'
          {
            "$schema": "https://ui.shadcn.com/schema.json",
            "style": "default",
            "rsc": false,
            "tsx": true,
            "tailwind": {
              "config": "tailwind.config.js",
              "css": "app/globals.css",
              "baseColor": "slate",
              "cssVariables": true
            },
            "aliases": {
              "components": "@/components",
              "utils": "@/lib/utils"
            }
          }
          EOF

      - name: Test CLI help command
        shell: bash
        run: |
          cd e2e-test-workspace
          node ../caci/dist/index.js --help || echo "Help command test completed"

      - name: Test CLI version command
        shell: bash
        run: |
          cd e2e-test-workspace
          node ../caci/dist/index.js --version || echo "Version command test completed"

      - name: Test CLI with components.json
        shell: bash
        run: |
          cd e2e-test-workspace
          
          # Test analyze command if it exists
          node ../caci/dist/index.js analyze || echo "Analyze command test completed"
          
          # Test configure command if it exists
          node ../caci/dist/index.js configure --dry-run || echo "Configure command test completed"

      - name: Test CLI without components.json
        shell: bash
        run: |
          mkdir -p e2e-test-empty
          cd e2e-test-empty
          
          # Test behavior when no components.json exists
          node ../caci/dist/index.js analyze || echo "No components.json test completed"

      - name: Test CLI with invalid components.json
        shell: bash
        run: |
          mkdir -p e2e-test-invalid
          cd e2e-test-invalid
          
          # Create invalid JSON
          echo "{ invalid json }" > components.json
          
          # Test error handling
          node ../caci/dist/index.js analyze || echo "Invalid JSON test completed"

      - name: Test CLI with minimal components.json
        shell: bash
        run: |
          mkdir -p e2e-test-minimal
          cd e2e-test-minimal
          
          # Create minimal valid JSON
          echo "{}" > components.json
          
          # Test with minimal config
          node ../caci/dist/index.js analyze || echo "Minimal config test completed"

  e2e-real-world:
    name: CACI Real World E2E Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Build project
        working-directory: caci
        run: npm run build

      - name: Install CLI globally
        run: |
          cd caci
          npm pack
          npm install -g caci-*.tgz

      - name: Test with real shadcn/ui project structure
        run: |
          mkdir -p e2e-shadcn-test
          cd e2e-shadcn-test
          
          # Initialize a mock Next.js project structure
          mkdir -p {app,components,lib,pages,styles}
          mkdir -p components/ui
          
          # Create a realistic components.json
          cat > components.json << 'EOF'
          {
            "$schema": "https://ui.shadcn.com/schema.json",
            "style": "default",
            "rsc": true,
            "tsx": true,
            "tailwind": {
              "config": "tailwind.config.ts",
              "css": "app/globals.css",
              "baseColor": "slate",
              "cssVariables": true,
              "prefix": ""
            },
            "aliases": {
              "components": "@/components",
              "utils": "@/lib/utils",
              "ui": "@/components/ui"
            }
          }
          EOF
          
          # Create some mock component files
          mkdir -p components/ui
          echo 'export const Button = () => <button>Test</button>' > components/ui/button.tsx
          echo 'export const Card = () => <div>Card</div>' > components/ui/card.tsx
          
          # Test CLI with this setup
          caci --help
          caci analyze || echo "Real world test completed"

      - name: Test with API key scenarios
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p e2e-api-test
          cd e2e-api-test
          
          # Create components.json
          cp ../e2e-shadcn-test/components.json .
          
          if [ -n "$GEMINI_API_KEY" ]; then
            echo "Testing with API key..."
            caci analyze || echo "API key test completed"
          else
            echo "Testing without API key..."
            caci analyze || echo "No API key test completed"
          fi

      - name: Test edge cases
        run: |
          # Test with very large components.json
          mkdir -p e2e-large-config
          cd e2e-large-config
          
          # Generate a large configuration
          cat > components.json << 'EOF'
          {
            "$schema": "https://ui.shadcn.com/schema.json",
            "style": "default",
            "rsc": true,
            "tsx": true,
            "tailwind": {
              "config": "tailwind.config.ts",
              "css": "app/globals.css",
              "baseColor": "slate",
              "cssVariables": true,
              "prefix": "tw-"
            },
            "aliases": {
              "components": "@/components",
              "utils": "@/lib/utils",
              "ui": "@/components/ui",
              "hooks": "@/hooks",
              "lib": "@/lib",
              "types": "@/types",
              "api": "@/api",
              "config": "@/config",
              "constants": "@/constants",
              "helpers": "@/helpers",
              "contexts": "@/contexts",
              "providers": "@/providers"
            }
          }
          EOF
          
          caci analyze || echo "Large config test completed"

  e2e-file-operations:
    name: CACI E2E File Operations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Build project
        working-directory: caci
        run: npm run build

      - name: Test file system operations
        run: |
          mkdir -p e2e-fs-test
          cd e2e-fs-test
          
          # Create a project structure
          mkdir -p {src,lib,components,pages,app}
          
          # Create components.json
          cat > components.json << 'EOF'
          {
            "$schema": "https://ui.shadcn.com/schema.json",
            "style": "default",
            "rsc": false,
            "tsx": true,
            "tailwind": {
              "config": "tailwind.config.js",
              "css": "src/styles/globals.css",
              "baseColor": "slate",
              "cssVariables": true
            },
            "aliases": {
              "components": "@/components",
              "utils": "@/lib/utils"
            }
          }
          EOF
          
          # Test reading configuration
          node ../caci/dist/index.js analyze || echo "File operations test completed"
          
          # Check if any backup files were created
          ls -la || true

      - name: Test backup functionality
        run: |
          mkdir -p e2e-backup-test
          cd e2e-backup-test
          
          # Create original components.json
          echo '{"original": true}' > components.json
          
          # Run CLI command that might create backups
          node ../caci/dist/index.js configure --dry-run || echo "Backup test completed"
          
          # Check for backup files
          find . -name "*.backup*" -o -name "*backup*" || echo "No backup files found"

  e2e-performance:
    name: CACI E2E Performance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'caci/package-lock.json'

      - name: Install dependencies
        working-directory: caci
        run: npm ci

      - name: Build project
        working-directory: caci
        run: npm run build

      - name: Performance test with time measurement
        run: |
          mkdir -p e2e-perf-test
          cd e2e-perf-test
          
          # Create components.json
          cat > components.json << 'EOF'
          {
            "$schema": "https://ui.shadcn.com/schema.json",
            "style": "default",
            "rsc": true,
            "tsx": true,
            "tailwind": {
              "config": "tailwind.config.ts",
              "css": "app/globals.css",
              "baseColor": "slate",
              "cssVariables": true
            },
            "aliases": {
              "components": "@/components",
              "utils": "@/lib/utils"
            }
          }
          EOF
          
          # Measure execution time
          echo "Testing CLI performance..."
          time node ../dist/index.js analyze || echo "Performance test completed"

      - name: Memory usage test
        run: |
          cd e2e-perf-test
          
          # Monitor memory usage during execution
          /usr/bin/time -v node ../dist/index.js analyze || echo "Memory test completed"

  e2e-summary:
    name: CACI E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-cli, e2e-real-world, e2e-file-operations, e2e-performance]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## E2E Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Testing | ${{ needs.e2e-cli.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Real World Testing | ${{ needs.e2e-real-world.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Operations | ${{ needs.e2e-file-operations.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Testing | ${{ needs.e2e-performance.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.e2e-cli.result }}" == "failure" || "${{ needs.e2e-real-world.result }}" == "failure" || "${{ needs.e2e-file-operations.result }}" == "failure" || "${{ needs.e2e-performance.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Some E2E tests failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All E2E tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi