name: CACI Package NPM Publishing

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to package'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      tag:
        description: 'NPM tag for publication'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Perform dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: bash
    working-directory: packages/caci

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  pre-publish-checks:
    name: CACI Pre-publish Checks
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}
      should_publish: ${{ steps.should_publish.outputs.should_publish }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Determine version and tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # Calculate new version without modifying package.json
            if [[ "${{ github.event.inputs.version }}" == "prerelease" ]]; then
              NEW_VERSION=$(node -e "
                const semver = require('semver');
                const current = '$CURRENT_VERSION';
                console.log(semver.inc(current, 'prerelease', 'alpha'));
              ")
            else
              NEW_VERSION=$(node -e "
                const semver = require('semver');
                const current = '$CURRENT_VERSION';
                console.log(semver.inc(current, '${{ github.event.inputs.version }}'));
              ")
            fi
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            # For workflow_call, version is already provided as input
            VERSION="${{ inputs.version }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Determine NPM tag
        id: tag
        run: |
          # Determine tag based on version pattern
          if [[ "${{ steps.version.outputs.version }}" =~ -.*\. ]]; then
            echo "tag=beta" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag || 'latest' }}" >> $GITHUB_OUTPUT
          fi

      - name: Should publish?
        id: should_publish
        run: |
          DRY_RUN="false"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            DRY_RUN="true"
          elif [[ "${{ github.event_name }}" == "workflow_call" && "${{ inputs.dry_run }}" == "true" ]]; then
            DRY_RUN="true"
          fi

          if [[ "$DRY_RUN" == "true" ]]; then
            echo "üîç DRY RUN MODE - No actual publishing"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Run comprehensive tests
        run: |
          npm run build
          npm run test:coverage
          npm test

      - name: Verify package integrity
        run: |
          npm pack --dry-run
          npm audit --production

      - name: Check if version already exists on NPM
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if npm view code-assistant-config-interface@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already exists on NPM!"
            exit 1
          else
            echo "Version $VERSION is available for publishing"
          fi

  build-and-test:
    name: CACI Build and Test for Publishing
    runs-on: ${{ matrix.os }}
    needs: pre-publish-checks

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Test CLI installation
        shell: bash
        run: |
          npm pack
          npm install -g code-assistant-config-interface-*.tgz
          caci --version
          caci --help

      - name: Test in clean environment
        shell: bash
        run: |
          mkdir test-clean-install
          cd test-clean-install
          npm init -y
          npm install ../code-assistant-config-interface-*.tgz
          node -e "console.log('CLI installed successfully')"

  publish-npm:
    name: CACI Publish to NPM
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, build-and-test]
    if: needs.pre-publish-checks.outputs.should_publish == 'true'
    environment: npm-publishing
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Update version
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.pre-publish-checks.outputs.version }}"
          if [[ "$VERSION" != "null" && -n "$VERSION" ]]; then
            npm version $VERSION --no-git-tag-version --ignore-scripts
            echo "Updated package version to $VERSION"
          else
            echo "Version already set in package.json, skipping version update"
            echo "Current version: $(node -p 'require(\"./package.json\").version')"
          fi

      - name: Build for production
        run: npm run build

      - name: Final pre-publish checks
        run: |
          npm run test:coverage
          npm audit --production --audit-level moderate

      - name: Generate changelog
        id: changelog
        run: |
          # Install changelog generator if not present
          npx auto-changelog --template keepachangelog --commit-limit false --starting-version ${{ needs.pre-publish-checks.outputs.version }} --output CHANGELOG-CURRENT.md || echo "Could not generate changelog"

          # If changelog exists, use it for release notes
          if [[ -f CHANGELOG-CURRENT.md ]]; then
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
            cat CHANGELOG-CURRENT.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "CHANGELOG_CONTENT=Release version ${{ needs.pre-publish-checks.outputs.version }}" >> $GITHUB_ENV
          fi

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üöÄ Publishing code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }} with tag ${{ needs.pre-publish-checks.outputs.tag }}"
          
          # Verify authentication and package info before publishing
          echo "üìã Pre-publish verification:"
          echo "- NPM User: $(npm whoami 2>/dev/null || echo 'Authentication failed')"
          echo "- Package version: $(node -p 'require("./package.json").version')"
          echo "- Package name: $(node -p 'require("./package.json").name')"
          echo "- Publish tag: ${{ needs.pre-publish-checks.outputs.tag }}"
          echo ""
          
          # Attempt to publish with retry logic
          MAX_PUBLISH_ATTEMPTS=3
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_PUBLISH_ATTEMPTS ]; do
            echo "üì§ Publish attempt $ATTEMPT/$MAX_PUBLISH_ATTEMPTS..."
            
            if npm publish --tag ${{ needs.pre-publish-checks.outputs.tag }} --access public; then
              echo "‚úÖ Successfully published to NPM!"
              break
            else
              PUBLISH_EXIT_CODE=$?
              echo "‚ùå Publish attempt $ATTEMPT failed with exit code $PUBLISH_EXIT_CODE"
              
              if [ $ATTEMPT -eq $MAX_PUBLISH_ATTEMPTS ]; then
                echo "üí• All publish attempts failed. Exiting."
                exit $PUBLISH_EXIT_CODE
              else
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10
                ATTEMPT=$((ATTEMPT + 1))
              fi
            fi
          done

      - name: Verify publication
        run: |
          echo "üîç Verifying publication of version ${{ needs.pre-publish-checks.outputs.version }}"
          
          # Wait for NPM registry to propagate (with exponential backoff)
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking if version ${{ needs.pre-publish-checks.outputs.version }} is available..."
            
            # Try to fetch the specific version that was just published
            if PUBLISHED_VERSION=$(npm view code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }} version 2>/dev/null); then
              if [[ "$PUBLISHED_VERSION" == "${{ needs.pre-publish-checks.outputs.version }}" ]]; then
                echo "‚úÖ Successfully verified publication of version ${{ needs.pre-publish-checks.outputs.version }}"
                
                # Also verify it shows up with the correct tag
                TAGGED_VERSION=$(npm view code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.tag }} version 2>/dev/null || echo "not-found")
                if [[ "$TAGGED_VERSION" == "${{ needs.pre-publish-checks.outputs.version }}" ]]; then
                  echo "‚úÖ Version is correctly tagged as '${{ needs.pre-publish-checks.outputs.tag }}'"
                else
                  echo "‚ö†Ô∏è Version published but tag '${{ needs.pre-publish-checks.outputs.tag }}' may still be propagating (currently: $TAGGED_VERSION)"
                fi
                
                exit 0
              fi
            fi
            
            echo "Version not yet available, waiting..."
            WAIT_TIME=$((2 ** (ATTEMPT - 1)))  # Exponential backoff: 1, 2, 4, 8, 16 seconds...
            sleep $WAIT_TIME
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "‚ùå Publication verification failed after $MAX_ATTEMPTS attempts"
          echo "Expected version: ${{ needs.pre-publish-checks.outputs.version }}"
          echo "Expected tag: ${{ needs.pre-publish-checks.outputs.tag }}"
          
          # Show current NPM registry state for debugging
          echo ""
          echo "üìä Current NPM registry state:"
          npm view code-assistant-config-interface versions --json 2>/dev/null || echo "Package not found or error querying registry"
          npm view code-assistant-config-interface@latest version 2>/dev/null || echo "Latest tag not found"
          
          exit 1

  create-github-release:
    name: CACI Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, publish-npm]
    if: needs.pre-publish-checks.outputs.should_publish == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'packages/caci/package-lock.json'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Create release package
        run: |
          npm pack
          ls -la code-assistant-config-interface-*.tgz

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## CACI (Code Assistant Configuration Interface) v${{ needs.pre-publish-checks.outputs.version }}

          ### üì¶ Installation
          ```bash
          npm install -g code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}
          ```

          ### üîó NPM Package
          - **NPM**: https://www.npmjs.com/package/code-assistant-config-interface/v/${{ needs.pre-publish-checks.outputs.version }}
          - **Tag**: `${{ needs.pre-publish-checks.outputs.tag }}`

          ### üöÄ Usage
          ```bash
          caci --help
          caci analyze
          caci configure
          ```

          ### üìã What's New
          ${{ env.CHANGELOG_CONTENT || 'See commit history for changes in this release.' }}

          ### üß™ Testing
          This release has been tested on:
          - Ubuntu Latest, macOS Latest, Windows Latest
          - Node.js versions 18, 20, 22
          - Multiple real-world project scenarios

          ### üîç Verification
          You can verify the integrity of this release:
          ```bash
          npm view code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}
          ```
          EOF

      - name: Create tag for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ needs.pre-publish-checks.outputs.version }} -m "Release v${{ needs.pre-publish-checks.outputs.version }}"
          git push origin v${{ needs.pre-publish-checks.outputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.pre-publish-checks.outputs.version }}
          name: CACI (Code Assistant Configuration Interface) v${{ needs.pre-publish-checks.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.pre-publish-checks.outputs.version, '-') }}
          files: |
            packages/caci/code-assistant-config-interface-${{ needs.pre-publish-checks.outputs.version }}.tgz

  post-publish:
    name: CACI Post-publish Tasks
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, publish-npm, create-github-release]
    if: always() && needs.pre-publish-checks.outputs.should_publish == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Test installation from NPM
        if: needs.publish-npm.result == 'success'
        run: |
          # Wait a bit more for NPM to fully sync
          sleep 60

          # Test global installation
          npm install -g code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}
          caci --version
          caci --help

          # Test project installation
          mkdir test-project-install
          cd test-project-install
          npm init -y
          npm install code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}

      - name: Update package documentation
        if: needs.pre-publish-checks.outputs.tag == 'latest'
        run: |
          echo "Latest version ${{ needs.pre-publish-checks.outputs.version }} published successfully!"
          echo "NPM: https://www.npmjs.com/package/caci"
          echo "GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.pre-publish-checks.outputs.version }}"

      - name: Notify on success
        run: |
          echo "üéâ Successfully published code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}"
          echo "üì¶ NPM: https://www.npmjs.com/package/code-assistant-config-interface/v/${{ needs.pre-publish-checks.outputs.version }}"
          echo "üè∑Ô∏è Tag: ${{ needs.pre-publish-checks.outputs.tag }}"

  publish-summary:
    name: CACI Publication Summary
    runs-on: ubuntu-latest
    needs:
      [
        pre-publish-checks,
        build-and-test,
        publish-npm,
        create-github-release,
        post-publish,
      ]
    if: always()

    defaults:
      run:
        shell: bash

    steps:
      - name: Summary
        run: |
          echo "## NPM Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-publish Checks | ${{ needs.pre-publish-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Publish | ${{ needs.publish-npm.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-github-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-publish | ${{ needs.post-publish.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.pre-publish-checks.outputs.should_publish }}" == "true" ]]; then
            if [[ "${{ needs.publish-npm.result }}" == "success" ]]; then
              echo "‚úÖ **Successfully published code-assistant-config-interface@${{ needs.pre-publish-checks.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó **Links:**" >> $GITHUB_STEP_SUMMARY
              echo "- NPM: https://www.npmjs.com/package/code-assistant-config-interface/v/${{ needs.pre-publish-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              echo "- GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.pre-publish-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Publication failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ÑπÔ∏è Dry run completed - no publication performed" >> $GITHUB_STEP_SUMMARY
          fi
